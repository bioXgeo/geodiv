grid.arrange(grobs = plts, nrow = 3)
grid.arrange(grobs = plts, nrow = 2)
# Download data from figshare.
elev <- raster(url[4])
# Download data from figshare.
elev <- raster(url[4])
evi <- raster(url[3]) * 0.0001
elev <- aggregate(elev, fact = 8)
elev <- aggregate(elev, fact = 8)
evi <- aggregate(evi, fact = 8)
state <- maps::map(database = 'state', regions = 'oregon',
fill = TRUE, plot = FALSE)
statePoly <- map2SpatialPolygons(state, IDs = state$names,
proj4string = CRS(proj4string(evi)))
evi_masked <- mask(x = evi, mask = statePoly)
elev_masked <- mask(x = elev, mask = statePoly)
rasterVis::levelplot(evi_masked, margin = F, par.settings = eviTheme,
ylab = NULL, xlab = NULL,
main = 'Maximum Growing Season EVI')
# plot elevation (in meters) for Oregon
elevCols <- colorRampPalette(c('grey7', 'grey93'))(100)
elevTheme <- rasterVis::rasterTheme(region = elevCols)
rasterVis::levelplot(elev_masked, margin = F, par.settings = elevTheme,
ylab = NULL, xlab = NULL, main = 'Elevation (m)')
# Download data from figshare.
elev <- raster(url[4])
elev <- aggregate(elev, fact = 8)
elev_masked <- mask(x = elev, mask = statePoly)
rasterVis::levelplot(elev_masked, margin = F, par.settings = elevTheme,
ylab = NULL, xlab = NULL, main = 'Elevation (m)')
evi_masked <- remove_plane(evi_masked)
elev_masked <- remove_plane(elev_masked) # there was no trend
# plot again to see what the new raster looks like
rasterVis::levelplot(evi_masked, margin = F, par.settings = eviTheme,
ylab = NULL, xlab = NULL, main = 'EVI without Trend')
rasterVis::levelplot(elev_masked, margin = F, par.settings = elevTheme,
ylab = NULL, xlab = NULL, main = 'Elevation without Trend')
# The list of figshare files was completed above, so grab the appropriate files
# for the csv's of all texture image outputs for Oregon.
data_evi <- read.csv(url[2], stringsAsFactors = FALSE)
data_elev <- read.csv(url[1], stringsAsFactors = FALSE)
for (i in c(9, 10, 18, 6)) {
hist(data_elev[, i], breaks = 30, xlab = names(data_elev)[i], main = '')
}
# New names for plots
plt_names <- data.frame(old = names(data_elev)[3:ncol(data_elev)],
new = c('Shw', 'Srw', 'Srwi', 'Std', 'Stdi', 'S10z',
'Sa', 'Sbi', 'Sci', 'Sdc 50-55%', 'Sdc 80-85%',
'Sdc 0-5%', 'Sdq6', 'Sdr', 'Sds', 'Sfd', 'Sk',
'Sku', 'Smean', 'Sph', 'Spk', 'Sq', 'Ssc',
'Ssk', 'Sv', 'Svi', 'Svk'))
create_maps <- function(df, r, theme) {
maps_list <- list()
for (i in seq(3, ncol(df))) {
cat('Creating map for var: ', names(df)[i], '\n', sep = '')
temp <- setValues(r, df[, i])
temp[is.na(r)] <- NA
goodname <- plt_names$new[plt_names$old == names(df)[i]]
maps_list[[i - 2]] <- rasterVis::levelplot(temp, margin = F,
par.settings = theme,
ylab = NULL, xlab = NULL,
main = goodname)
maps_list[[i - 2]]$par.settings$layout.heights[
c( 'bottom.padding',
'top.padding',
'key.sub.padding',
'axis.xlab.padding',
'key.axis.padding',
'main.key.padding') ] <- 1
maps_list[[i - 2]]$aspect.fill <- TRUE
names(maps_list)[i - 2] <- goodname
}
return(maps_list)
}
# Create plots of all possible surface gradient metrics that geodiv calculates
# for elevation and EVI.
elev_maps <- create_maps(data_elev, elev_masked, elevTheme)
evi_maps <- create_maps(data_evi, evi_masked, eviTheme)
# Make sure that order of maps is the same for both EVI and Elevation.
# get order according to names table
new_order <- match(plt_names$new, names(evi_maps))
evi_maps <- evi_maps[new_order]
# create 3x4 panels (x3 for each)
for (l in list(elev_maps, evi_maps)) {
grid.arrange(grobs = l[1:12], nrow = 4, ncol = 3) # 850x800
grid.arrange(grobs = l[13:24], nrow = 4, ncol = 3) # 850x800
grid.arrange(grobs = l[25:27], nrow = 4, ncol = 3) # 850x800
}
elev_maps
plt_names
class(plt_names$new)
as.character(plt_names$new)
create_maps <- function(df, r, theme) {
maps_list <- list()
for (i in seq(3, ncol(df))) {
cat('Creating map for var: ', names(df)[i], '\n', sep = '')
temp <- setValues(r, df[, i])
temp[is.na(r)] <- NA
goodname <- as.character(plt_names$new[plt_names$old == names(df)[i]])
maps_list[[i - 2]] <- rasterVis::levelplot(temp, margin = F,
par.settings = theme,
ylab = NULL, xlab = NULL,
main = goodname)
maps_list[[i - 2]]$par.settings$layout.heights[
c( 'bottom.padding',
'top.padding',
'key.sub.padding',
'axis.xlab.padding',
'key.axis.padding',
'main.key.padding') ] <- 1
maps_list[[i - 2]]$aspect.fill <- TRUE
names(maps_list)[i - 2] <- goodname
}
return(maps_list)
}
# Create plots of all possible surface gradient metrics that geodiv calculates
# for elevation and EVI.
elev_maps <- create_maps(data_elev, elev_masked, elevTheme)
evi_maps <- create_maps(data_evi, evi_masked, eviTheme)
head(elev_maps)
# Make sure that order of maps is the same for both EVI and Elevation.
# get order according to names table
new_order <- match(plt_names$new, names(evi_maps))
evi_maps <- evi_maps[new_order]
# create 3x4 panels (x3 for each)
for (l in list(elev_maps, evi_maps)) {
grid.arrange(grobs = l[1:12], nrow = 4, ncol = 3) # 850x800
grid.arrange(grobs = l[13:24], nrow = 4, ncol = 3) # 850x800
grid.arrange(grobs = l[25:27], nrow = 4, ncol = 3) # 850x800
}
# Download data from figshare.
elev <- raster(url[4])
evi <- raster(url[3]) * 0.0001
elev <- aggregate(elev, fact = 8)
evi <- aggregate(evi, fact = 8)
state <- maps::map(database = 'state', regions = 'oregon',
fill = TRUE, plot = FALSE)
statePoly <- map2SpatialPolygons(state, IDs = state$names,
proj4string = CRS(proj4string(evi)))
evi_masked <- mask(x = evi, mask = statePoly)
elev_masked <- mask(x = elev, mask = statePoly)
rasterVis::levelplot(evi_masked, margin = F, par.settings = eviTheme,
ylab = NULL, xlab = NULL,
main = 'Maximum Growing Season EVI')
# plot elevation (in meters) for Oregon
elevCols <- colorRampPalette(c('grey7', 'grey93'))(100)
elevTheme <- rasterVis::rasterTheme(region = elevCols)
rasterVis::levelplot(elev_masked, margin = F, par.settings = elevTheme,
ylab = NULL, xlab = NULL, main = 'Elevation (m)')
evi_masked <- remove_plane(evi_masked)
elev_masked <- remove_plane(elev_masked) # there was no trend
# plot again to see what the new raster looks like
rasterVis::levelplot(evi_masked, margin = F, par.settings = eviTheme,
ylab = NULL, xlab = NULL, main = 'EVI without Trend')
rasterVis::levelplot(elev_masked, margin = F, par.settings = elevTheme,
ylab = NULL, xlab = NULL, main = 'Elevation without Trend')
# for the csv's of all texture image outputs for Oregon.
data_evi <- read.csv(url[2], stringsAsFactors = FALSE)
data_elev <- read.csv(url[1], stringsAsFactors = FALSE)
for (i in c(9, 10, 18, 6)) {
hist(data_elev[, i], breaks = 30, xlab = names(data_elev)[i], main = '')
}
# New names for plots
plt_names <- data.frame(old = names(data_elev)[3:ncol(data_elev)],
new = c('Shw', 'Srw', 'Srwi', 'Std', 'Stdi', 'S10z',
'Sa', 'Sbi', 'Sci', 'Sdc 50-55%', 'Sdc 80-85%',
'Sdc 0-5%', 'Sdq6', 'Sdr', 'Sds', 'Sfd', 'Sk',
'Sku', 'Smean', 'Sph', 'Spk', 'Sq', 'Ssc',
'Ssk', 'Sv', 'Svi', 'Svk'))
create_maps <- function(df, r, theme) {
maps_list <- list()
for (i in seq(3, ncol(df))) {
temp <- setValues(r, df[, i])
temp[is.na(r)] <- NA
goodname <- as.character(plt_names$new[plt_names$old == names(df)[i]])
maps_list[[i - 2]] <- rasterVis::levelplot(temp, margin = F,
par.settings = theme,
ylab = NULL, xlab = NULL,
main = goodname)
maps_list[[i - 2]]$par.settings$layout.heights[
c( 'bottom.padding',
'top.padding',
'key.sub.padding',
'axis.xlab.padding',
'key.axis.padding',
'main.key.padding') ] <- 1
maps_list[[i - 2]]$aspect.fill <- TRUE
names(maps_list)[i - 2] <- goodname
}
return(maps_list)
}
elev_maps <- create_maps(data_elev, elev_masked, elevTheme)
evi_maps <- create_maps(data_evi, evi_masked, eviTheme)
# Make sure that order of maps is the same for both EVI and Elevation.
new_order <- match(plt_names$new, names(evi_maps)) # get order according to names table
evi_maps <- evi_maps[new_order]
# Create map panels (3 each for EVI and elevation).
for (l in list(elev_maps, evi_maps)) {
grid.arrange(grobs = l[1:12], nrow = 4, ncol = 3) # 850x800
grid.arrange(grobs = l[13:24], nrow = 4, ncol = 3) # 850x800
grid.arrange(grobs = l[25:27], nrow = 4, ncol = 3) # 850x800
}
sp_df <- function(r, df) {
pixdf <- as.data.frame(as(r, "SpatialPixelsDataFrame"))
df$value <- pixdf[, 1]
return(df)
}
data_elev <- sp_df(elev, data_elev)
data_evi <- sp_df(evi, data_evi)
head(data_elev)
head(data_evi)
# Create new dataframe of values along a latitudinal transect.
get_transect <- function(r, df) {
# Crop raster to center transect (+/- 7 pixels North or South).
center_row <- round(nrow(r) / 2)
r_crop <- crop(r, extent(r, center_row - 7, center_row + 7, 1, ncol(r)))
# Get 8th latitudinal coordinate (center latitude) from the cropped raster.
central_y <- unique(coordinates(r_crop)[, 2])[8]
# Get the closest latitude in the dataframe to the central raster coordinate.
central_y <- unique(df$y[near(df$y, central_y, 0.01)])[1]
# Extract mean EVI and elevation values by raster column.
r_means <- colMeans(as.matrix(r_crop), na.rm = TRUE)
# Now limit the dataframe to the central row across the transect.
transect_vals <- df[df$y == central_y,]
# Add column means to dataframe.
transect_vals$value <- r_means
return(transect_vals)
}
transect_elev <- get_transect(elev, data_elev)
transect_evi <- get_transect(evi, data_evi)
head(transect_elev)
scale_mets <- function(df) {
for (i in 3:ncol(df)) {
df[,i] <- (df[, i] - min(df[, i], na.rm = TRUE)) /
(max(df[, i], na.rm = TRUE) - min(df[, i], na.rm = TRUE))
}
return(df)
}
transect_elev <- scale_mets(transect_elev)
transect_evi <- scale_mets(transect_evi)
head(transect_elev)
rm_nas <- function(df) {
for (i in 3:ncol(df)) {
df <- df[!is.na(df[, i]),]
}
return(df)
}
transect_elev <- rm_nas(transect_elev)
transect_evi <- rm_nas(transect_evi)
head(transect_elev)
plot_gap <- function(df) {
# enhanced k-means clustering
res.km <- clusGap(t(df)[3:(ncol(df) - 1), ], stats::kmeans, K.max = 10,
B = 100, nstart = 25)
# gap statistic plot
factoextra::fviz_gap_stat(res.km)
}
plot_gap(transect_evi)
plot_gap(transect_elev)
get_clusters <- function(df, nclust) {
# Enhanced hierarchical clustering using optimal # of clusters.
res.hc <- factoextra::eclust(t(df)[3:(ncol(df) - 1),],
"hclust", k = nclust)
return(res.hc)
}
plot_dendrogram <- function(res.hc, nclust){
# Plot colors
plt_cols <- c('lightgoldenrod1', 'lightblue', 'grey', 'lightsteelblue4')
# Dendrogram plot
fviz_dend(res.hc, rect = FALSE, k_colors = plt_cols[1:nclust],
lwd = 1, label_cols = 'black', cex = 0.8, main = "", ylab = "",
type = 'rectangle', horiz = TRUE, labels_track_height = 14) +
theme(axis.text.y = element_blank(), axis.ticks = element_blank())
}
plot_scatter <- function(res.hc) {
# Scatterplot
fviz_cluster(res.hc)
}
res.hc_elev <- get_clusters(transect_elev, nclust = 4)
res.hc_evi <- get_clusters(transect_evi, nclust = 3)
plot_dendrogram(res.hc_elev, nclust = 4)
plot_dendrogram(res.hc_evi, nclust = 3)
plot_scatter(res.hc_elev)
plot_scatter(res.hc_evi)
gather_data <- function(df) {
df <- df %>% tidyr::gather(key = 'var', value = 'value',
names(df[, seq(3, ncol(df))]))
# Order variables.
df <- df[order(df$var),]
return(df)
}
gathered_elev <- gather_data(transect_elev)
gathered_evi <- gather_data(transect_evi)
head(gathered_elev)
head(gathered_evi)
# Plot metrics along transect, with cluster labeled.
plot_transect_mets <- function(df, res.hc, varname) {
# Map colors to cluster or variable names.
col_map <- c("1" = "lightgoldenrod1", "2" = "lightblue", "3" = "grey",
"4" = "lightsteelblue4", "EVI" = "white", "Elev" = "white")
# Create a dataframe to match variable names with cluster number.
clust_df <- data.frame(var = res.hc$labels, clust = res.hc$cluster)
clust_df <- clust_df[order(clust_df$clust),]
# Join cluster number with main dataframe to get cluster labels for plotting.
df <- left_join(df, clust_df, by = 'var')
# Anything not labeled with a cluster (i.e., the actual value) gets labeled.
df$clust[is.na(df$clust)] <- varname
# Change 'value' label to actual variable name.
df$var[df$var == 'value'] <- varname
# Convert cluster names to factors and match with colors.
df$clust <- as.factor(df$clust)
df$var <- factor(df$var, levels = c(clust_df$var, varname))
cols_to_use <- col_map[names(col_map) %in% df$clust]
ggplot(df, aes(x = x, y = value)) +
geom_rect(aes(xmin = -Inf, xmax = Inf, ymin = -Inf, ymax = Inf,
fill = clust)) +
geom_line(lwd = 0.7) +
xlab('Longitude') +
facet_grid(var~., switch = 'y') +
scale_fill_manual(values = cols_to_use, name = 'Cluster') +
theme_bw() +
theme(axis.title.y = element_blank(),
axis.text.y = element_blank(),
strip.text.y.left = element_text(face = 'bold', size = 11, angle = 0),
legend.position = 'none',
axis.title.x = element_text(face = 'bold', size = 11))
}
plot_transect_mets(gathered_elev, res.hc_elev, "Elev")
df = gathered_elev
res.hc = res.hc_elev
varname = "Elev"
# Map colors to cluster or variable names.
col_map <- c("1" = "lightgoldenrod1", "2" = "lightblue", "3" = "grey",
"4" = "lightsteelblue4", "EVI" = "white", "Elev" = "white")
# Create a dataframe to match variable names with cluster number.
clust_df <- data.frame(var = res.hc$labels, clust = res.hc$cluster)
clust_df <- clust_df[order(clust_df$clust),]
head(clust_df)
# Join cluster number with main dataframe to get cluster labels for plotting.
df <- left_join(df, clust_df, by = 'var')
head(df)
# Anything not labeled with a cluster (i.e., the actual value) gets labeled.
df$clust[is.na(df$clust)] <- varname
head(df)
unique(df$var)
# Change 'value' label to actual variable name.
df$var[df$var == 'value'] <- varname
unique(df$var)
# Convert cluster names to factors and match with colors.
df$clust <- as.factor(df$clust)
df$var <- factor(df$var, levels = c(clust_df$var, varname))
cols_to_use <- col_map[names(col_map) %in% df$clust]
cols_to_use
unique(df$var)
head(clust_df)
class(clust_df)
class(clust_df$var)
df = gathered_elev
# Create a dataframe to match variable names with cluster number.
clust_df <- data.frame(var = as.character(res.hc$labels), clust = res.hc$cluster)
clust_df <- clust_df[order(clust_df$clust),]
# Join cluster number with main dataframe to get cluster labels for plotting.
df <- left_join(df, clust_df, by = 'var')
# Anything not labeled with a cluster (i.e., the actual value) gets labeled.
df$clust[is.na(df$clust)] <- varname
# Change 'value' label to actual variable name.
df$var[df$var == 'value'] <- varname
# Convert cluster names to factors and match with colors.
df$clust <- as.factor(df$clust)
df$var <- factor(df$var, levels = c(clust_df$var, varname))
cols_to_use <- col_map[names(col_map) %in% df$clust]
unique(df$var)
class(clust_df$var)
df = gathered_elev
# Create a dataframe to match variable names with cluster number.
clust_df <- data.frame(var = as.character(res.hc$labels), clust = res.hc$cluster)
clust_df <- clust_df[order(clust_df$clust),]
# Join cluster number with main dataframe to get cluster labels for plotting.
df <- left_join(df, clust_df, by = 'var')
# Anything not labeled with a cluster (i.e., the actual value) gets labeled.
df$clust[is.na(df$clust)] <- varname
# Change 'value' label to actual variable name.
df$var[df$var == 'value'] <- varname
# Convert cluster names to factors and match with colors.
df$clust <- as.factor(df$clust)
df$var <- factor(as.character(df$var), levels = c(clust_df$var, varname))
cols_to_use <- col_map[names(col_map) %in% df$clust]
unique(df$var)
c(clust_df$var)
head(clust_df)
df = gathered_elev
# Create a dataframe to match variable names with cluster number.
clust_df <- data.frame(var = res.hc$labels, clust = res.hc$cluster)
clust_df <- clust_df[order(clust_df$clust),]
# Convert var to character.
clust_df$var <- as.character(clust_df$var)
# Join cluster number with main dataframe to get cluster labels for plotting.
df <- left_join(df, clust_df, by = 'var')
# Anything not labeled with a cluster (i.e., the actual value) gets labeled.
df$clust[is.na(df$clust)] <- varname
# Change 'value' label to actual variable name.
df$var[df$var == 'value'] <- varname
# Convert cluster names to factors and match with colors.
df$clust <- as.factor(df$clust)
df$var <- factor(df$var, levels = c(clust_df$var, varname))
cols_to_use <- col_map[names(col_map) %in% df$clust]
unique(df$var)
# Plot metrics along transect, with cluster labeled.
plot_transect_mets <- function(df, res.hc, varname) {
# Map colors to cluster or variable names.
col_map <- c("1" = "lightgoldenrod1", "2" = "lightblue", "3" = "grey",
"4" = "lightsteelblue4", "EVI" = "white", "Elev" = "white")
# Create a dataframe to match variable names with cluster number.
clust_df <- data.frame(var = res.hc$labels, clust = res.hc$cluster)
clust_df <- clust_df[order(clust_df$clust),]
# Convert var to character.
clust_df$var <- as.character(clust_df$var)
# Join cluster number with main dataframe to get cluster labels for plotting.
df <- left_join(df, clust_df, by = 'var')
# Anything not labeled with a cluster (i.e., the actual value) gets labeled.
df$clust[is.na(df$clust)] <- varname
# Change 'value' label to actual variable name.
df$var[df$var == 'value'] <- varname
# Convert cluster names to factors and match with colors.
df$clust <- as.factor(df$clust)
df$var <- factor(df$var, levels = c(clust_df$var, varname))
cols_to_use <- col_map[names(col_map) %in% df$clust]
ggplot(df, aes(x = x, y = value)) +
geom_rect(aes(xmin = -Inf, xmax = Inf, ymin = -Inf, ymax = Inf,
fill = clust)) +
geom_line(lwd = 0.7) +
xlab('Longitude') +
facet_grid(var~., switch = 'y') +
scale_fill_manual(values = cols_to_use, name = 'Cluster') +
theme_bw() +
theme(axis.title.y = element_blank(),
axis.text.y = element_blank(),
strip.text.y.left = element_text(face = 'bold', size = 11, angle = 0),
legend.position = 'none',
axis.title.x = element_text(face = 'bold', size = 11))
}
plot_transect_mets(gathered_elev, res.hc_elev, "Elev")
citation('landscapemetrics')
citation('factoextra')
library(devtools)
install.packages('devtools')
install.packages('pkgdown')
install.packages('systemfonts')
install.packages('systemfonts')
install.packages('systemfonts')
install.packages('tools')
install.packages("tools")
install.packages("tools")
install.packages("tools")
?compactPDF
tools::compactPDF('~/Documents/Annie/geodiv/vignettes/orig_ndvi_figure.png')
tools::compactPDF('~/Documents/Annie/geodiv/vignettes/orig_ndvi_figure.png', qpdf = Sys.getenv('R_QPDF', 'qpdf'))
install.packages('systemfonts')
install.packages('devtools')
install.packages('roxygen2')
tools::compactPDF('~/Documents/Annie/geodiv/vignettes/orig_ndvi_figure.png', qpdf = Sys.getenv('R_QPDF', 'qpdf'))
devtools::check()
?install.packages
install.versions('roxygen2', '7.1.1')
packageurl = "https://cran.r-project.org/src/contrib/Archive/roxygen2/roxygen2_7.1.1.tar.gz"
install.packages(packageurl, repos = NULL, source = TRUE)
devtools::check()
install.packages('dplyr')
install.packages(c('phontools', 'pracma', 'raster'))
install.packages(c('phonTools))
''
gjdaga
)
''gldakjg
install.packages(c('phonTools'))
install.packages(c('e1071', 'sf', 'zoo', 'spatial'))
install.packages(c('raster', 'rgdal', 'sf'))
packagerl = 'https://cran.r-project.org/src/contrib/Archive/rgdal/rgdal_1.6-3.tar.gz'
install.packages(packagerl, repos = NULL, source = TRUE)
require(rgdal)
require(terra)
require(sf)
require(rgeos)
devtools::check()
install.packages('RcppArmadillo')
devtools::check()
install.packages('landscapemetrics')
library(devtools)
devtools::check()
install.packages('R.rsp')
devtools::check()
data(normforest)
x = unwrap(normforest)
normforest
install.packages('geodiv')
install.packages("geodiv")
data(normforest)
install.packages('codetools')
library(geodiv)
data(normforest)
normforest
unload(geodiv)
x = normforest
x=rast(normforest)
x
x = wrap(x)
normforest = x
rm(x)
normforest
test = unwrap(normforest)
test
rm(test)
